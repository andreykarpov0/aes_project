#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <random>

using namespace std;

string readFile(string path);
void writeFile(string path, string text);
string encrypt(string text, vector<vector <unsigned char > > key);
string decrypt(string text, vector<vector <unsigned char > > key);
vector<vector <unsigned char > > keyexpansion(string password, int tsize);
void mixColumns(vector<unsigned char> &state);
void invMixColumns(vector<unsigned char> &state);

int main() 
{
	string pathin, pathout, text, password, res;
	char a;
	int n;
	cout << "Enter path to file in: ";
	cin >> pathin;
	cout << "Enter path to file out: ";
	cin >> pathout;
	cout << "encrypt - 1, decrypt - 0: ";
	cin >> n;
	cout << "Enter password(key size = 16 symbols and password must be only english): ";
	cin >> password;
	while(password.size()!=16)
	{
		cout << "Incorrect. Enter password(max - 16 symbols and password must be only english): ";
		cin >> password;
	}
	text = readFile(pathin);
	cout << text << endl;
	auto key = keyexpansion(password, text.size());
	if(n)
		res = encrypt(text, key);
	else
		res = decrypt(text, key);
	//res = text;
	writeFile(pathout, res);
	cout << res << endl;
	cin >> a;
	cin >> a;
}

string readFile(string path)
{
	ifstream fin(path, ios::binary );
	char ch;
	string buffer;

  // copies all data into buffer
  // vector<unsigned char> buffer(std::istreambuf_iterator<unsigned char>(fInput), {});
	while (fin.get(ch))
    {
        buffer += ch;
    }
	return buffer;
}

void writeFile(string path, string text)
{
	ofstream fout(path, ios::binary);
	fout << text;
	fout.close();
}
string encrypt(string text, vector<vector <unsigned char > > key)
{
	string result = "";
	int count = 0;
	vector<unsigned char> S_BOX =
	{
		0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
	};
	vector <vector< vector< unsigned char > > > blockText(1,vector<vector<unsigned char > >(0, vector<unsigned char>(0, 0)));
	vector <vector< vector< unsigned char > > > roundkeys(1,vector<vector<unsigned char > >(0, vector<unsigned char>(0, 0)));
	if(text.size() % 16)
	{
		blockText.resize(text.size() / 16+1);
	}
	else
	{
		blockText.resize(text.size() / 16);
	}
	roundkeys.resize(blockText.size());
	
	
	//замена

	//for(int i = 0; i < text.size(); ++i){result += (unsigned char)S_BOX[(int)text[i]];}

	for(int i = 0; i < blockText.size(); ++i)
	{
		for(int j = 0; j < 4; ++j)
		{
			for(int k = 0; k < 4; ++k)
			{
				if(count >= text.size() * 16)
				{
					blockText[i][j][k]=1;
					break;
				}
				blockText[i][j][k]=(unsigned char)S_BOX[(int)text[count]];
				++count;
			}
		}
	}
	count = 0;
	//перестановка
	for(int i = 0; i < blockText.size(); ++i)
	{
		for(int j = 0; j < blockText[i].size(); ++j)
		{
			for(int n = 0; n <= j; ++n)
			{
				mixColumns(blockText[i][j]);
			}
		}
	}
	//гаммирование(xor)
	for(int i = 0; i < blockText.size(); ++i)
	{
		for(int j = 0; j < blockText[i].size(); ++j)
		{
			for(int k = 0; k < blockText[i][j].size(); ++k)
			{
				result += blockText[i][j][k];//^key[j][k+i*16];
			}
		}
	}
	return result;
}

string decrypt(string text, vector<vector <unsigned char > > key)
{
	int count = 0;
	string result = "";
	vector<int> INV_S_BOX =
	{
		0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
	};
	vector <vector< vector< unsigned char > > > blockText(1,vector<vector<unsigned char > >(4, vector<unsigned char>(4, 0)));

	blockText.resize(text.size() / 16);
	//гаммирование(xor)
	for(int i = 0; i < blockText.size(); ++i)
	{
		for(int j = 0; j < blockText[i].size(); ++j)
		{
			for(int k = 0; k < blockText[i][j].size(); ++k)
			{
				blockText[i][j][k] = text[count]^key[j][k+i*16];
			}
		}
	}
	count = 0;

	//перестановка
	for(int i = 0; i < blockText.size(); ++i)
	{
		for(int j = 0; j < blockText[i].size(); ++j)
		{
			for(int n = 0; n <= j; ++n)
			{
				invMixColumns(blockText[i][j]);
			}
		}
	}

	//замена
	for(int i = 0; i < blockText.size(); ++i)
	{
		for(int j = 0; j < blockText[i].size(); ++j)
		{
			for(int k = 0; k < blockText[i][j].size(); ++k)
			{
				if(count >= text.size() * 16)
					break;
				blockText[i][j][k] = (unsigned char)INV_S_BOX[(int)text[count]];
				result += (unsigned char)INV_S_BOX[(int)text[count]];
				++count;
			}
		}
	}
	for(int i = result.size()-1;;--i)
	{
		if(result[i] == 0)
		{
			result.substr(0, result.size()-1);
		}
		else if(result[i] == 1)
		{
			result.substr(0, result.size()-1);
			break;
		}
	}
	while(result[result.size()-1] == 0)
	{
		result.substr(0, result.size()-1);
	}
	if(result[result.size()-1] == 1)
	{
		result.substr(0, result.size()-1);
	}
	return result;
}

void mixColumns(vector<unsigned char> &state)
{
	swap(state[0], state[1]);
	swap(state[1], state[2]);
	swap(state[2], state[3]);
}
void invMixColumns(vector<unsigned char> &state)
{
	swap(state[3], state[2]);
	swap(state[2], state[1]);
	swap(state[1], state[0]);
}

vector<vector<unsigned char > > key(4, vector<unsigned char>(4, 0));
int w = key[0].size(), n = 1;
char boof;

vector<vector <unsigned char > > keyexpansion(string password, int tsize)
{	
	for(int i = 0; i < key.size(); ++i)
	{
		for(int j = 0; j < key[i].size(); ++j)
		{
			key[i][j] = password[i*4+j];
		}
	}
	for(int n = 0; n < tsize%16+1; ++n)
	{
		for(int i = 0; i < 4; ++i)
		{
			key[i].push_back(key[i][w-3]^key[i][w-1]^n);
			n*=2;
		}
		++w;
	}
	return key;
}